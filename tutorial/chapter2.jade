.step(data-file='app/controllers/users_controller.rb', data-highlight='6-22')
  :markdown
    ## Registering a User with Authy

    When a new User signs up for our website, we call this controller, which handles saving our new User to the database as well as registering the User with Authy.

    All Authy needs to get a user set up for your application is the email, phone number and country code. So in order to do two-factor authentication, we need to make sure we ask for these things at the point of sign up.

    Once we register the User with Authy we get an `authy_id` back. This is very important since it's' how we will verify the identity of our User with Authy.

    ---

    **See Also:**
    * [Looking up an ActiveRecord object](//guides.rubyonrails.org/active_record_querying.html#retrieving-a-single-object)
    * [Enabling a User with Authy](//docs.authy.com/#section-Enabling_two-factor_on_a_user)
    * [All about Rails Sessions](//guides.rubyonrails.org/action_controller_overview.html#session)

.step(data-file='app/controllers/sessions_controller.rb', data-highlight='6-29')
  :markdown
    ## Logging in with Authy OneTouch

    When a User attempts to log in to our website, we will ask them for a second form of identification, let's take a look at OneTouch verification first. 

    ![Authy OneTouch Approval](//howtodocs.s3.amazonaws.com/onetouch-approved.gif)

    OneTouch works like so:
    * We attempt to send a User a _OneTouch Approval Request_
    * If the User has OneTouch enabled, we will get a `success` message back
    * The User hits 'Approve' in their Authy app
    * Authy makes a POST request to our app with an 'Approved' status
    * We log the User in

    In the next steps we'll look at how we handle cases where the User does not have OneTouch or denies the login request.

.step(data-file='app/controllers/sessions_controller.rb', data-highlight='11-21')
  :markdown
    ## Sending the OneTouch Request

    When our User logs in we immediately attempt to verify their identity with OneTouch. We will fallback gracefully if they don't have a OneTouch device, but we don't know until we try.

    Authy let's us pass details with our OneTouch request, including a message, a logo and any other details we want to send. We could easily send any number of details by appending `details[Some Detail]`. You could imagine a scenario where we send a OneTouch request to approve a money transfer:

    ```ruby
    "message" => "Request to Send Money to Jarod's vault",
    "details[Request From]" => "Jarod",
    "details[Amount Request]" => "1,000,000",
    "details[Currency]" => "Galleons",
    ```
    Once we send the request we need to update our User's `authy_status` based on the response.

    --- 

    **See Also:**
    * [NET::HTTP gem cheatsheet](https://github.com/augustl/net-http-cheat-sheet/blob/master/post_form.rb)
    * [ActiveRecord: Enums](//edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html)

.step(data-file='app/controllers/authy_controller.rb', data-highlight='11-22, 49-72, 5-7')
  :markdown
    ## Configuring the OneTouch callback

    In order for our app to know what the User did after we sent the OneTouch request, we need to register a callback endpoint with Authy.

    ![Authy OneTouch Callback](//howtodocs.s3.amazonaws.com/onetouch-callback-endpoint.png)

    *Note: In order to verify that the request is coming from Authy we've written a filter that will halt the request if it appears it isn't coming from Authy.*

    Here in our callback, we look up the user using the `authy_id` sent with the Authy POST request. Ideally at this point we would probably use a websocket to let our client know that we received a response from Authy. However for this version we're going to keep it simple and just update the `authy_status` on the User. Then all our client-side code needs to do is check for `user.authy_status.approved` before logging her in.

    Let's take a look at the client-side code that will be handling this.

    --- 

    **See Also:**
    * [ActiveRecord find_by!](//guides.rubyonrails.org/active_record_querying.html#find-by)

.step(data-file='app/assets/javascripts/sessions.js')
  :markdown
    ## Handling Two-Factor Asyncronously

    In order for two-factor authentication to be seamless, it is best done asynchronously so that the user doesn't even know it's happening.

    We've already taken a look at what's happening on the server side, so let's step in front of the cameras now and see how our javascript is interacting with those server endpoints.

    First we hijack the login form submit and pass the data to our `sessions/create` controller using Ajax. Depending on how that endpoint responds we will either ask the User for token or await their OneTouch response.

    If we expect a OneTouch response, we will begin polling `/authy/status` until we either see OneTouch login was either approved or denied. Let's take a look at this controller and see what is happening.

    --- 

    **See Also:**
    * [jQuery Post method](//api.jquery.com/jquery.post/)
    * [Bootstrap modals](//getbootstrap.com/javascript/#modals)

.step(data-file='app/controllers/authy_controller.rb', data-highlight='24-28')
  :markdown
    ## Authy Status

    Here is the endpoint that our javascript is polling. It is waiting for the user status to be either 'Approved' or 'Denied'. If the User has approved the OneTouch request, we will store their id in the session, which officially logs them in.

    If the request was denied we will ask the User to log in with a Token.
    
    --- 

    **See Also:**
    * [Rails: Using render](//guides.rubyonrails.org/layouts_and_rendering.html#using-render)
