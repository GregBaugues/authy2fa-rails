.step(data-title='How it Works', data-file='app/models/user.rb', data-highlight='')
  :markdown
    ## How It Works

    Adding two-factor authentication (2FA) to your web application can help increase the security of your user's data. [Multi-factor authentication](http://en.wikipedia.org/wiki/Multi-factor_authentication) determines the identity of a user by validating one or more of the following "factors":

    * _Knowledge Factors_ (Something a user knows, like a password)
    * _Posession Factors_ (Something a user has, like a mobile phone)
    * _Inheritance Factors_ (Something a user is, like a person with a unique finger print)

    We're about to walk you through a sample application that implements a simple login system with a _knowledge factor_ and a _posession factor_. For the knowledge factor, we will use a standard username/password system. For the possession factor, we will validate that the user has their mobile phone by sending them a one-time passcode in a text message [sent with Authy via Twilio](http://www.authy.com/). Here's how this works at a high level:

    ![2FA High Level](//s3.amazonaws.com/howtodocs/2fa-high-level.png)

    Now it's time to look at some code! We'll begin by understanding the moving parts of this example [Ruby on Rails](http://rubyonrails.org/) application before diving into the actual implementation of the login flow.
.step(data-title="Our App's Dependencies", data-file='Gemfile', data-language='ruby')
  :markdown
    ## Our App's Dependencies

    Our application's `Gemfile` contains a standard array of Ruby gems to support our Rails application. One addition we've made is the [Authy Ruby gem](https://github.com/authy/authy-ruby) to make integration with Authy's 2FA API a bit simpler.

    In addition to the Authy gem, we need to configure our Authy API key. Let's look at how we do that.


.step(data-title='Configuring Authy', data-file='config/initializers/authy.rb', data-highlight='')
  :markdown
    ## Configuring Authy

    If you haven't already, now is the time to [sign up for Authy](https://dashboard.authy.com/signup). Create your first application, naming it whatever you wish. After you create your application, your "production" API key will be visible on your [dashboard](https://dashboard.authy.com):

    ![Authy Dashboard](//s3.amazonaws.com/howtodocs/2fa-authy-dashboard.png)

    Once we have an Authy API key, we store it in this [initializer file](http://guides.rubyonrails.org/configuring.html). Rather than storing it as a string, we pull it in from a system environment variable in the `ENV` hash. This prevents us from accidentally checking this sensitive value into source control.

    Now that we've configured our Rails app, let's take a look at the domain model we'll need to create our user login system.

.step(data-title='What Goes Into a Login System?', data-file='db/schema.rb', data-highlight='')
  :markdown
    ## What Goes Into a Login System?

    Authentication and authorization are some of the trickiest concepts to get right in a web application, and implementations vary quite a bit from application to application. But generally speaking, every login system has two concepts to implement:

    * `User` : An individual person using the system
    * `Session` : A series of authenticated interations a user has with the system

    Our application implements an ActiveRecord model object for the user, and will use an HTTP session to track login status.

    Our `User` model has a name, e-mail address, phone number, and a hashed password to compare against user-entered passwords during the login step. It also has an "Authy ID" which will associate our ActiveRecord user model with an Authy API user. Creating this association lets us use Authy to send our user 2FA verification codes, and verify user-entered one-time passwords.

    Next, let's take a look at how to actually implement 2FA in our application, starting with the creation of user accounts.