.step(data-title='Logging In with 2FA', data-file='app/controllers/sessions_controller.rb', data-highlight='')
  :markdown
    ## Logging In with 2FA

    Our sessions controller handles all the steps involved in logging our user into the application. There's a number of steps involved in this process, but our first order of business is to validate the user's e-mail address and password. Let's check out how we do that first.

.step(data-title="Checking the Password", data-file='app/controllers/sessions_controller.rb', data-highlight="2-16")
  :markdown
    ## Checking the Password

    These two route handlers are responsible for displaying our login form and handling a login form submission. We won't look at the HTML for the login form, as it's pretty basic - just two text fields for an e-mail and password.  The `new` method handles rendering that view for the `/sessions/new` route. With a little CSS assist from [Twitter Bootstrap](http://getbootstrap.com/) and [Font Awesome](http://fortawesome.github.io/Font-Awesome/), the login form will look something like this:

    ![The Login Form](//s3.amazonaws.com/howtodocs/2fa-screen-login.png)

    The `create` route verifies the e-mail and password that are submitted by the user. If the password matches, the user's database ID is stored in the session object as `pre_2fa_auth_user_id` so we can refer to it later. 

    Next, we use the Authy API to send a one-time password to the user's phone. The user will need to successfully enter the code Authy sends them on our web form to complete their login to our system. Let's check out how we do that next.

.step(data-title='The 2FA Step', data-file='app/controllers/sessions_controller.rb', data-highlight='18-33')
  :markdown
    ## The 2FA Step

    These two route handlers are responsible for displaying a form to enter the Authy verification code, and then validate the code that they entered.

    The `two_factor` method displays a view with a single text field to enter the 2FA token sent previously via the Authy API. The verification form will look something like this to the end user:

    ![The Verification Form](//s3.amazonaws.com/howtodocs/2fa-screen-verify.png)

    The `verify` method is responsible for validating the token sent to our user via SMS.  First, we grab the `User` model by the ID we stored in the session during the previous step in `pre_2fa_auth_user_id`.  Next, we use the Authy API to validate the token our user entered against the one Authy sent them.  If the two match, our login process is complete!  We store the user's database ID in the session object as `user_id`, which we use to indicate that the user has sucessfully logged in to our application.

    To wrap things up, let's see how we protect routes in our application based on the information we've stored in the session.